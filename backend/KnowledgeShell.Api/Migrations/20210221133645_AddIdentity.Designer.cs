// <auto-generated />
using System;
using KnowledgeShell.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace KnowledgeShell.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210221133645_AddIdentity")]
    partial class AddIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("KnowledgeShell.Api.Models.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DomainType")
                        .HasColumnType("integer")
                        .HasColumnName("domain_type");

                    b.Property<Guid>("FrameBaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("frame_base_id");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read_only");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_domains");

                    b.HasIndex("FrameBaseId")
                        .HasDatabaseName("ix_domains_frame_base_id");

                    b.ToTable("domains");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.DomainValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid")
                        .HasColumnName("domain_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_domain_values");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("ix_domain_values_domain_id");

                    b.ToTable("domain_values");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DomainValue");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Frame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FrameBaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("frame_base_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.HasKey("Id")
                        .HasName("pk_frames");

                    b.HasIndex("FrameBaseId")
                        .HasDatabaseName("ix_frames_frame_base_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_frames_parent_id");

                    b.HasIndex("PositionId")
                        .IsUnique()
                        .HasDatabaseName("ix_frames_position_id");

                    b.ToTable("frames");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.FrameBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_frame_bases");

                    b.ToTable("frame_bases");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("X")
                        .HasColumnType("double precision")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double precision")
                        .HasColumnName("y");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Production", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("slot_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_productions");

                    b.HasIndex("SlotId")
                        .IsUnique()
                        .HasDatabaseName("ix_productions_slot_id");

                    b.ToTable("productions");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DomainId")
                        .HasColumnType("uuid")
                        .HasColumnName("domain_id");

                    b.Property<bool>("IsInherited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_inherited");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("ValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("value_id");

                    b.HasKey("Id")
                        .HasName("pk_slots");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("ix_slots_domain_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_slots_owner_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_slots_parent_id");

                    b.HasIndex("ValueId")
                        .HasDatabaseName("ix_slots_value_id");

                    b.ToTable("slots");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.DomainValueFrame", b =>
                {
                    b.HasBaseType("KnowledgeShell.Api.Models.DomainValue");

                    b.Property<Guid>("FrameValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("frame_value_id");

                    b.HasIndex("FrameValueId")
                        .HasDatabaseName("ix_domain_values_frame_value_id");

                    b.HasDiscriminator().HasValue("DomainValueFrame");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.DomainValueNumber", b =>
                {
                    b.HasBaseType("KnowledgeShell.Api.Models.DomainValue");

                    b.Property<double>("NumberValue")
                        .HasColumnType("double precision")
                        .HasColumnName("number_value");

                    b.HasDiscriminator().HasValue("DomainValueNumber");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.DomainValueString", b =>
                {
                    b.HasBaseType("KnowledgeShell.Api.Models.DomainValue");

                    b.Property<string>("StringValue")
                        .HasColumnType("text")
                        .HasColumnName("string_value");

                    b.HasDiscriminator().HasValue("DomainValueString");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Domain", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.FrameBase", "FrameBase")
                        .WithMany("Domains")
                        .HasForeignKey("FrameBaseId")
                        .HasConstraintName("fk_domains_frame_bases_frame_base_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FrameBase");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.DomainValue", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.Domain", "Domain")
                        .WithMany("DomainValues")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("fk_domain_values_domains_domain_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Frame", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.FrameBase", "FrameBase")
                        .WithMany("Frames")
                        .HasForeignKey("FrameBaseId")
                        .HasConstraintName("fk_frames_frame_bases_frame_base_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeShell.Api.Models.Frame", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_frames_frames_parent_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KnowledgeShell.Api.Models.Position", "Position")
                        .WithOne()
                        .HasForeignKey("KnowledgeShell.Api.Models.Frame", "PositionId")
                        .HasConstraintName("fk_frames_positions_position_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FrameBase");

                    b.Navigation("Parent");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Production", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.Slot", "Slot")
                        .WithOne("Production")
                        .HasForeignKey("KnowledgeShell.Api.Models.Production", "SlotId")
                        .HasConstraintName("fk_productions_slots_slot_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Slot", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .HasConstraintName("fk_slots_domains_domain_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KnowledgeShell.Api.Models.Frame", "Owner")
                        .WithMany("OwnSlots")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_slots_frames_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeShell.Api.Models.Slot", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_slots_slots_parent_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KnowledgeShell.Api.Models.DomainValue", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId")
                        .HasConstraintName("fk_slots_domain_values_value_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Domain");

                    b.Navigation("Owner");

                    b.Navigation("Parent");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeShell.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.DomainValueFrame", b =>
                {
                    b.HasOne("KnowledgeShell.Api.Models.Frame", "FrameValue")
                        .WithMany()
                        .HasForeignKey("FrameValueId")
                        .HasConstraintName("fk_domain_values_frames_frame_value_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FrameValue");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Domain", b =>
                {
                    b.Navigation("DomainValues");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Frame", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("OwnSlots");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.FrameBase", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Frames");
                });

            modelBuilder.Entity("KnowledgeShell.Api.Models.Slot", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Production");
                });
#pragma warning restore 612, 618
        }
    }
}
